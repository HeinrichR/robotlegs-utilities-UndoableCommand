h1. Undoable Commands and History Controller for the Robotlegs Framework

This is a fork of Tim Oxleys robotlegs-utilities-UndoableCommand project.
https://github.com/timoxley/robotlegs-utilities-UndoableCommand

h2. This version

A pretty major rewrite, I have changed the single history list in CommandHistory in favour of simplified list management in the form of two separate lists for undo and redo.

Use of an interface ICommandHistory for history injection points. I have a project where I need two separate undo histories so needed the ability to vary the implementation of CommandHistory.  

Complete events dispatched from the CommandHistory were removed. The UndoableCommand is intended to be used synchronously but asynchronous messaging capabilities could be implemented in subclasses if desired.

Allow for num levels argument to be passed in UNDO/REDO events to do multiple undos.

Changed HistoryEvent STEP_BACKWARD / STEP_FORWARD types to UNDO/REDO for clarity and since 'step' suggest a single step as opposed to multiple undos. 


h2. Features

* Undo/Redo
* Clear history

h2. Events

HistoryEvent.CLEAR
Trigger clearing of all history

HistoryEvent.UNDO
Trigger undo x num of levels

HistoryEvent.REDO
Trigger redo x num of levels

Note all events and corresponding commands are provided for convenience. You will still need to map them in a robotlegs context.
e.g. 

commandMap.mapEvent(HistoryEvent.UNDO, UndoCommand);

h3. UndoableCommand

Use as a base class for your undoable commands. This command handles adding itself to a provided/injected ICommandHistory object.

h3. CommandHistory

The history controller that provides the interface to undo and redo your command history.


h2. Quickstart

* Download the "latest release swc":https://github.com/d3zza/robotlegs-utilities-UndoableCommand or feel free to download the source and compile for yourself, the test cases depend on FlexUnit4.
* Include downloaded swc in your project
* Create your command which extends UndoableCommand
* Override methods execute and unexecute: execute should contain the code you want to execute when the command is fired; unexecute should contain whatever code is needed to manually undo the actions performed by execute. After performing execute functionality, call super.execute() to have command add itself to the injected ICommandHistory implementation. Exit execute method without calling super.execute() will prevent command from being added to the history.

	<pre>
	// Create a CommandHistory to manages undo/redo history
	injector.mapSingleton(CommandHistory);
	// Events to trigger undo and redo
	commandMap.mapEvent(HistoryEvent.UNDO, UndoCommand, HistoryEvent);
	commandMap.mapEvent(HistoryEvent.REDO, RedoCommand, HistoryEvent);
	</pre>

* Map some event to the Command you created (just like you would with any normal robotlegs command)
* Set a Button/Mediator to actually fire the HistoryEvent.UNDO/REDO events on the robotlegs event bus and you're done! :)
	
	<pre>
	dispatch( new HistoryEvent( HistoryEvent.UNDO, 2 ) ); // undo last 2 commands
	</pre>

